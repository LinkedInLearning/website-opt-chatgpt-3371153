========================= Prompt ==========================

Bitte schreibe diese Funktion in Typescript um:

function filterUsersByAge(users, minAge)
 { return users.filter(user => user.age >= minAge); }

const users = [
 { name: "Alice", age: 25, email: "alice@example.com" },
 { name: "Bob", age: 20, email: "bob@example.com" },
 { name: "Charlie", age: 30, email: "charlie@example.com" } ]; 

const filteredUsers = filterUsersByAge(users, 21); console.log(filteredUsers);

==================== ChatGPT-Antwort ======================

Um die gegebene JavaScript-Funktion in TypeScript umzuschreiben, sollten wir die Typen der Variablen und Parameter explizit deklarieren. Hier ist eine TypeScript-Version der Funktion filterUsersByAge:

typescript
Copy code
// Definiere eine Schnittstelle für die User-Objekte
interface User {
  name: string;
  age: number;
  email: string;
}

// Die Funktion nimmt ein Array von User-Objekten und eine minimale Altersgrenze an
function filterUsersByAge(users: User[], minAge: number): User[] {
  return users.filter(user => user.age >= minAge);
}

// Initialisiere das Array von User-Objekten mit Typ-Annotation
const users: User[] = [
  { name: "Alice", age: 25, email: "alice@example.com" },
  { name: "Bob", age: 20, email: "bob@example.com" },
  { name: "Charlie", age: 30, email: "charlie@example.com" }
];

// Filtere die User und speichere das Ergebnis
const filteredUsers: User[] = filterUsersByAge(users, 21);

// Gib das gefilterte Array in der Konsole aus
console.log(filteredUsers);
Diese Version definiert zunächst eine TypeScript-Schnittstelle User, die das Schema für User-Objekte vorgibt. Die Funktion filterUsersByAge und das Array users verwenden dann diese Typ-Annotationen, um sicherzustellen, dass die Daten und der Zugriff darauf typsicher sind.